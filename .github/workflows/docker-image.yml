name: Publish Docker image

# Tagging a release 'vX' will create an image named "paulgalow/racoder:vX" and one for ":latest"
# Tagging a release with 'unstable' will create an image named "paulgalow/racoder:unstable"
on:
  push:
    tags:
      - "*"
  pull_request:
    tags:
      - "*"

jobs:
  push_to_registries:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up QEMU for more CPU architectures
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx for multi-platform builds
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker (versioned tags)
        if: startsWith(github.ref, 'refs/tags/v')
        id: meta_versioned
        uses: docker/metadata-action@v4
        with:
          images: |
            paulgalow/racoder
            ghcr.io/${{ github.repository }}
          flavor: |
            latest=true

      - name: Extract metadata (tags, labels) for Docker (non-versioned tags)
        if: "!startsWith(github.ref, 'refs/tags/v')"
        id: meta_non_versioned
        uses: docker/metadata-action@v4
        with:
          images: |
            paulgalow/racoder
            ghcr.io/${{ github.repository }}
          flavor: |
            latest=false

      - name: Build and push Docker images (versioned tags)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm
          push: true
          tags: ${{ steps.meta_versioned.outputs.tags }}
          labels: ${{ steps.meta_versioned.outputs.labels }}

      - name: Build and push Docker images (non-versioned tags)
        if: "!startsWith(github.ref, 'refs/tags/v')"
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm
          push: true
          tags: ${{ steps.meta_non_versioned.outputs.tags }}
          labels: ${{ steps.meta_non_versioned.outputs.labels }}

      - name: Sync GitHub meta-data to Docker Hub
        run: |
          # Fetch the GitHub repository description and README.md content
          REPO_DESCRIPTION=$(jq -r '.description' <(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}))
          README_CONTENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/readme | jq -r '.content' | base64 --decode)

          # Authenticate with Docker Hub and get JWT token
          JWT_TOKEN=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"username\": \"${{ secrets.DOCKER_USERNAME }}\", \"password\": \"${{ secrets.DOCKER_ACCESS_TOKEN }}\"}" https://hub.docker.com/v2/users/login/ | jq -r '.token')

          # Prepare the payload for Docker Hub API
          PAYLOAD=$(jq -n \
            --arg description "$REPO_DESCRIPTION" \
            --arg readme "$README_CONTENT" \
            '{description: $description, full_description: $readme}')

          # Update Docker Hub repository description and README
          curl -s -X PATCH \
            -H "Authorization: JWT $JWT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            https://hub.docker.com/v2/repositories/paulgalow/racoder/

        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
